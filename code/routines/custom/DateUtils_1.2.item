package routines;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
//import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/* 
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class DateUtils {

	private static String DEFAULT_FORMAT = "yyyy-MM-dd HH:mm:ss";
	
    
    
    /**
     * getCurrentDateTime("yyyy") 년도 스트링 반환
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} ""
     * 
     * {example} getCurrentDateTime() 
     */
    public static String getCurrentDateTime(String format) {
    	
    	LocalDateTime currentDate = LocalDateTime.now();
    	DateTimeFormatter formatter = DateTimeFormatter.ofPattern(format);    	
    	return currentDate.format(formatter);
    
    }
    
    /**
     * getCurrentDateTime: return 현재시간("yyyy-MM-dd HH:mm:ss")
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} ""
     * 
     * {example} getCurrentDateTime() 
     */
    public static String getCurrentDateTime() {
    	return getCurrentDateTime("yyyy-MM-dd HH:mm:ss");
    }
    
    /**
     * getUpdateFlagIU: 날자를 비교하여 둘의 날자가 다르면 변경 되어 'U'를 리턴 
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} date("world") input: The string need to be printed.
     * 
     * {example} getUpdateFlagIU((date)2018-07-26 01:06:55.323, (date)2018-07-26 01:06:55.323 ) # hello world !.
     */
    public static String getUpdateFlagIU(Date dt1, Date dt2) {
    	String fg="I";
    	//System.out.println(dt1.toString() +"/" +dt2.toString());
    	try {
    		LocalDateTime lcdt1 = LocalDateTime.ofInstant(dt1.toInstant(), ZoneId.systemDefault());
        	LocalDateTime lcdt2 = LocalDateTime.ofInstant(dt2.toInstant(), ZoneId.systemDefault());    		
        	if(lcdt1.compareTo(lcdt2) != 0)  fg = "U";
    	}catch(Exception e) {
    		e.printStackTrace();
    		
    	}
    	return fg;
    			
    }
    
    public static String getUpdateFlagIU(String dt1, String dt2) {
    	if (QUtils.isRealEmpty(dt1) || QUtils.isRealEmpty(dt2)) return "";
    	if (StringHandling.LEN(dt1) > 19 ) dt1 = StringHandling.LEFT(dt1,19);
    	if (StringHandling.LEN(dt2) > 19 ) dt2 = StringHandling.LEFT(dt2,19);
    	
    	String fg="I";    	
    	try {DateTimeFormatter format = DateTimeFormatter.ofPattern(DEFAULT_FORMAT);
    		LocalDateTime lcdt1 = LocalDateTime.parse(dt1,format);
        	LocalDateTime lcdt2 = LocalDateTime.parse(dt2,format);        	
        	if(lcdt1.compareTo(lcdt2) != 0)  fg = "U";
    	}catch(Exception e) {
    		e.printStackTrace();
    		
    	}
    	return fg;
    			
    }
    
    public static String getZoneDateTimeToDateTime(String time) {
        if (time != null) {
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            if (time.toUpperCase().contains("T") && time.toUpperCase().contains("Z")) {
                time = time.toUpperCase().replace("T", " ");
                String[] str = time.split("\\.");

                if (str.length != 0) {
                    return str[0];
                }
            }

            try {
            	Date date = simpleDateFormat.parse(time);
            	time = simpleDateFormat.format(date);
                /*Date date = new Date(time);
                time = simpleDateFormat.format(date);*/
            } catch (Exception e) {
            	e.printStackTrace();
            }
        }
        return time;
    }
    
    /**
     * 
     * @param localDateTime
     * @param nb
     * @param dateType
     * {talendTypes} Date
     * {Category} User Defined
     * {param} localDateTime, nb , dateType
     * {example} DateUtils.addDateFormat(QProp.getBizStartDt(),100,"dd") 
     * 
     */
    public static String addDateFormat(LocalDateTime localDateTime, long nb, String dateType) {
		return addDateFormat(localDateTime, nb, dateType, null);
	}
	
    /**
     * 
     * @param localDateTime
     * @param nb
     * @param dateType
     * {talendTypes} Date
     * {Category} User Defined
     * {param} localDateTime, nb , dateType
     * {example} DateUtils.addDateFormat(QProp.getBizStartDt(),100,"dd") 
     * 
     */
	public static String addDateFormat(LocalDateTime localDateTime, long nb, String dateType, String format) {
		if (format == null)
            format = "yyyy-MM-dd HH:mm:ss";
		localDateTime = addDate(localDateTime, nb, dateType);
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(format);
		String result = localDateTime.format(formatter);
		return result;
	}
	
	/**
     * 
     * @param localDateTime
     * @param nb
     * @param dateType
     * {talendTypes} Date
     * {Category} User Defined
     * {param} localDateTime, nb , dateType
     * {example} DateUtils.addDateFormat(QProp.getBizStartDt(),100,"dd") 
     * 
     */
	public static LocalDateTime addDate(LocalDateTime localDateTime, long nb, String dateType) {
        if (localDateTime == null || dateType == null) {
            return null;
        }

        if (dateType.equalsIgnoreCase("yyyy")) { //$NON-NLS-1$
        	localDateTime =localDateTime.plusYears(nb);
        } else if (dateType.equals("MM")) { //$NON-NLS-1$
        	localDateTime =localDateTime.plusMonths(nb);
        } else if (dateType.equalsIgnoreCase("dd")) { //$NON-NLS-1$
        	localDateTime =localDateTime.plusDays(nb);
        } else if (dateType.equals("HH")) { //$NON-NLS-1$
        	localDateTime =localDateTime.plusHours(nb);
        } else if (dateType.equals("mm")) { //$NON-NLS-1$
        	localDateTime =localDateTime.plusMinutes(nb);
        } else if (dateType.equalsIgnoreCase("ss")) { //$NON-NLS-1$
        	localDateTime =localDateTime.plusSeconds(nb);
        } else {
            throw new RuntimeException("Can't support the dateType: " + dateType);
        }

        return localDateTime;
    }
	
	
	/**
     * 날짜 크기 비교
     * s1>=s2 -> 1, s1<s2 -> -1, s1=s2 -> 0
     * 
     * {talendTypes} Boolean
     * 
     * {Category} MongoDBUtils
     * 
     * {param} String input: 
     * 
     * {example} 
     */  
    public static int compareDate(String s1, String s2) {
 	
    	return compareDate(s1, s2, "yyyyMMddHHmmss");
    }
      
    
	/**
     * 날짜 크기 비교
     * s1>=s2 -> 1, s1<s2 -> -1, error -> 0
     * 
     * {talendTypes} Boolean
     * 
     * {Category} MongoDBUtils
     * 
     * {param} String input: 
     * 
     * {example} 
     */  
    public static int compareDate(String s1, String s2, String format) {
 	
    	//return TalendDate.compareDate(TalendDate.parseDate(format, s1), TalendDate.parseDate(format, s1), format);
    	
    	int result = 0;
    	
    	SimpleDateFormat sdf = new SimpleDateFormat(format);
    	
    	try {
	        Date day1 = sdf.parse( s1 );
	        Date day2 = sdf.parse( s2 );
	
	        result = day1.compareTo(day2);
	    } catch (ParseException e) {
	        e.printStackTrace();
	    }
           
    	return result;
    }
      
    
	/**
     * Auto convert String to Date
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("Date formate String") input: Return null if not a date format string.
     * 
     * {example} parseStringToDate("2014/12/14 오전 10:11:11") / parseStringToDate("2014-12-30 13:50:22")...
     */
    public static Date parseStringToDate(String strDate) {
		String dateString = new String(strDate);

		//System.out.println("{{{ parseStringToDate Input Str: " + strDate );
		if(dateString.length() >= 14) {
			if(!dateString.contains("/") && !dateString.contains("-")) {
				dateString = dateString.substring(0, 14);
			}
		}
		
		 
		
		Map<String, String> date_format_regexps = new HashMap<String, String>();

		date_format_regexps.put("^\\d{4}\\d{1,2}\\d{1,2}$", "yyyyMMdd");
		date_format_regexps.put("^\\d{1,2}-\\d{1,2}-\\d{2}$", "yy-MM-dd");
		//테스트용
		date_format_regexps.put("^\\d{1,2}\\d{1,2}\\d{1,2}$", "yyMMdd");
		
		date_format_regexps.put("^\\d{1,2}/\\d{1,2}/\\d{2}$", "yy/MM/dd");
		date_format_regexps.put("^\\d{1,2}-\\d{1,2}-\\d{4}$", "dd-MM-yyyy");
		date_format_regexps.put("^\\d{4}-\\d{1,2}-\\d{1,2}$", "yyyy-MM-dd");
		date_format_regexps.put("^\\d{1,2}/\\d{1,2}/\\d{4}$", "MM/dd/yyyy");
		date_format_regexps.put("^\\d{4}/\\d{1,2}/\\d{1,2}$", "yyyy/MM/dd");
		date_format_regexps.put("^\\d{1,2}\\s[a-z]{3}\\s\\d{4}$", "dd MMM yyyy");
		date_format_regexps.put("^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}$", "dd MMMM yyyy");
		date_format_regexps.put("^\\d{1,2}-\\d{1,2}-\\d{4}\\s\\d{1,2}:\\d{2}$", "dd-MM-yyyy HH:mm");
		date_format_regexps.put("^\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}:\\d{2}$", "yyyy-MM-dd HH:mm");
		date_format_regexps.put("^\\d{1,2}/\\d{1,2}/\\d{4}\\s\\d{1,2}:\\d{2}$", "MM/dd/yyyy HH:mm");
		date_format_regexps.put("^\\d{4}/\\d{1,2}/\\d{1,2}\\s\\d{1,2}:\\d{2}$", "yyyy/MM/dd HH:mm");
		date_format_regexps.put("^\\d{1,2}\\s[a-z]{3}\\s\\d{4}\\s\\d{1,2}:\\d{2}$", "dd MMM yyyy HH:mm");
		date_format_regexps.put("^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}\\s\\d{1,2}:\\d{2}$", "dd MMMM yyyy HH:mm");
		date_format_regexps.put("^\\d{4}\\d{1,2}\\d{1,2}\\d{1,2}\\d{2}$", "yyyyMMddHHmm");
		date_format_regexps.put("^\\d{4}\\d{1,2}\\d{1,2}\\d{1,2}\\d{2}\\d{2}$", "yyyyMMddHHmmss");
		date_format_regexps.put("^\\d{4}\\d{1,2}\\d{1,2}\\s\\d{1,2}\\d{2}$", "yyyyMMdd HHmm");
		date_format_regexps.put("^\\d{4}\\d{1,2}\\d{1,2}\\s\\d{1,2}\\d{2}\\d{2}$", "yyyyMMdd HHmmss");
		date_format_regexps.put("^\\d{1,2}-\\d{1,2}-\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "dd-MM-yyyy HH:mm:ss");
		date_format_regexps.put("^\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}:\\d{2}:\\d{2}$", "yyyy-MM-dd HH:mm:ss");
		date_format_regexps.put("^\\d{1,2}/\\d{1,2}/\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "MM/dd/yyyy HH:mm:ss");
		date_format_regexps.put("^\\d{4}/\\d{1,2}/\\d{1,2}\\s\\d{1,2}:\\d{2}:\\d{2}$", "yyyy/MM/dd HH:mm:ss");
		date_format_regexps.put("^\\d{1,2}\\s[a-z]{3}\\s\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "dd MMM yyyy HH:mm:ss");
		date_format_regexps.put("^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "dd MMMM yyyy HH:mm:ss");
		date_format_regexps.put("^\\d{4}-\\d{1,2}-\\d{1,2}\\s[가-힝]{2}\\s\\d{1,2}:\\d{2}:\\d{2}$", "yyyy-MM-dd a KK:mm:ss");
		date_format_regexps.put("^\\d{4}/\\d{1,2}/\\d{1,2}\\s[가-힝]{2}\\s\\d{1,2}:\\d{2}:\\d{2}$", "yyyy/MM/dd a KK:mm:ss");

	    for (String regexp : date_format_regexps.keySet()) {
	        if (dateString.toLowerCase().matches(regexp)) {
	        	
	    		SimpleDateFormat transFormat = new SimpleDateFormat(date_format_regexps.get(regexp));
	    	//	transFormat.setLenient(false);
	    		
	        	try {
	        		
					return transFormat.parse(dateString);
				} catch (ParseException e) {
					e.printStackTrace();
					
					return null;
					
				}
	        }
	    }
	    return null; // Unknown format.
	}
    
    public static String returnMongoDBDateType(String strDate) {
    	SimpleDateFormat mongo_format = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSS'Z'");
    	
    	Date date = parseStringToDate(strDate);
    	String utc_date = TalendDate.formatDateInUTC("yyyy-MM-dd HH:mm:ss", date);
    	
    	Date r_date = parseStringToDate(utc_date);
    	return mongo_format.format(r_date);
    }
    
}


